import React, { useState, useEffect } from "react";
import Sidebar from "../components/Sidebar";
import {
  FaUserShield,
  FaLock,
  FaTrash,
  FaUnlock,
  FaTimes,
  FaSave,
} from "react-icons/fa";
import Api from "../components/Api";

const TaiKhoan = () => {
  const [accounts, setAccounts] = useState([]);
  const [filteredAccounts, setFilteredAccounts] = useState([]);
  const [filterRole, setFilterRole] = useState("T·∫•t c·∫£");

  const [showModal, setShowModal] = useState(false);
  const [selectedAccIndex, setSelectedAccIndex] = useState(null);
  const [selectedRole, setSelectedRole] = useState("");
  const [selectedPermissions, setSelectedPermissions] = useState([]);

  const roles = ["admin", "bacsi", "user"];
  const permissionsList = [
    "T·∫°o t√†i kho·∫£n",
    "Kh√≥a t√†i kho·∫£n",
    "Xem l·ªãch h·∫πn",
    "T·∫°o l·ªãch h·∫πn",
    "Duy·ªát ƒë√°nh gi√°",
  ];

  // ‚úÖ L·∫•y danh s√°ch t√†i kho·∫£n t·ª´ backend
  useEffect(() => {
    const fetchAccounts = async () => {
      try {
        const res = await Api.get("user"); // ‚úÖ b·ªè d·∫•u "/"
        setAccounts(res.data);
        setFilteredAccounts(res.data);
      } catch (err) {
        console.error("‚ùå L·ªói khi t·∫£i danh s√°ch t√†i kho·∫£n:", err);
      }
    };
    fetchAccounts();
  }, []);

  // ‚úÖ L·ªçc theo vai tr√≤
  useEffect(() => {
    if (filterRole === "T·∫•t c·∫£") {
      setFilteredAccounts(accounts);
    } else {
      const filtered = accounts.filter(
        (acc) => acc.role?.toLowerCase() === filterRole.toLowerCase()
      );
      setFilteredAccounts(filtered);
    }
  }, [filterRole, accounts]);

  // üü¶ M·ªü modal ph√¢n quy·ªÅn
  const openRoleModal = (idx) => {
    setSelectedAccIndex(idx);
    setSelectedRole(filteredAccounts[idx].role || "");
    setSelectedPermissions(filteredAccounts[idx].permissions || []);
    setShowModal(true);
  };

  const togglePermission = (perm) => {
    setSelectedPermissions((prev) =>
      prev.includes(perm)
        ? prev.filter((p) => p !== perm)
        : [...prev, perm]
    );
  };

  const saveRole = async () => {
    try {
      const acc = filteredAccounts[selectedAccIndex];
      await Api.put(`user/${acc.id}`, { role: selectedRole }); // ‚úÖ b·ªè "/"
      alert("‚úÖ C·∫≠p nh·∫≠t quy·ªÅn th√†nh c√¥ng!");
      setShowModal(false);
    } catch (err) {
      console.error("‚ùå L·ªói khi l∆∞u quy·ªÅn:", err);
      alert("Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t quy·ªÅn!");
    }
  };

  const lockAccount = async (idx) => {
    try {
      const acc = filteredAccounts[idx];
      await Api.put(`user/${acc.id}`, { status: "ƒê√£ kh√≥a" }); // ‚úÖ b·ªè "/"
      const updated = [...filteredAccounts];
      updated[idx].status = "ƒê√£ kh√≥a";
      setFilteredAccounts(updated);
      alert("üîí ƒê√£ kh√≥a t√†i kho·∫£n!");
    } catch (err) {
      console.error("‚ùå L·ªói khi kh√≥a:", err);
    }
  };

  const unlockAccount = async (idx) => {
    try {
      const acc = filteredAccounts[idx];
      await Api.put(`user/${acc.id}`, { status: "ƒêang ho·∫°t ƒë·ªông" }); // ‚úÖ b·ªè "/"
      const updated = [...filteredAccounts];
      updated[idx].status = "ƒêang ho·∫°t ƒë·ªông";
      setFilteredAccounts(updated);
      alert("üîì ƒê√£ m·ªü kh√≥a t√†i kho·∫£n!");
    } catch (err) {
      console.error("‚ùå L·ªói khi m·ªü kh√≥a:", err);
    }
  };

  // üóë X√≥a t√†i kho·∫£n th·∫≠t trong database
  const deleteAccount = async (idx) => {
    const acc = filteredAccounts[idx];
    if (
      window.confirm(
        `B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën xo√° t√†i kho·∫£n "${acc.name}" kh√¥ng?`
      )
    ) {
      try {
        await Api.delete(`user/${acc.id}`); // ‚úÖ b·ªè "/"
        const updated = filteredAccounts.filter((_, i) => i !== idx);
        setFilteredAccounts(updated);
        setAccounts(accounts.filter((a) => a.id !== acc.id));
        alert(`‚úÖ ƒê√£ xo√° t√†i kho·∫£n "${acc.name}" kh·ªèi h·ªá th·ªëng!`);
      } catch (err) {
        console.error("‚ùå L·ªói khi x√≥a t√†i kho·∫£n:", err);
        alert("Kh√¥ng th·ªÉ x√≥a t√†i kho·∫£n n√†y!");
      }
    }
  };

  return (
    <div className="flex bg-gray-50 min-h-screen">
      <Sidebar />

      <div className="flex-1 p-6 pl-72">
        <h1 className="text-2xl font-bold mb-4 flex items-center gap-2">
          <FaUserShield /> Qu·∫£n l√Ω t√†i kho·∫£n
        </h1>

        {/* üîç B·ªô l·ªçc vai tr√≤ */}
        <div className="flex items-center gap-3 mb-4">
          <label className="font-semibold text-gray-700">B·ªô l·ªçc vai tr√≤:</label>
          <select
            value={filterRole}
            onChange={(e) => setFilterRole(e.target.value)}
            className="border border-gray-300 rounded px-3 py-2 focus:ring-2 focus:ring-blue-400"
          >
            <option value="T·∫•t c·∫£">T·∫•t c·∫£</option>
            <option value="bacsi">B√°c sƒ©</option>
            <option value="user">User</option>
            <option value="admin">Admin</option>
          </select>
          <span className="text-gray-500 text-sm">
            T·ªïng: {filteredAccounts.length} t√†i kho·∫£n
          </span>
        </div>

        {/* B·∫£ng t√†i kho·∫£n */}
        <div className="overflow-x-auto rounded shadow border bg-white">
          <table className="min-w-full">
            <thead className="bg-blue-50">
              <tr>
                <th className="px-4 py-3 border-b text-left">H·ªç v√† t√™n</th>
                <th className="px-4 py-3 border-b text-left">Email</th>
                <th className="px-4 py-3 border-b text-left">S·ªë ƒëi·ªán tho·∫°i</th>
                <th className="px-4 py-3 border-b text-left">Tr·∫°ng th√°i</th>
                <th className="px-4 py-3 border-b text-left">Vai tr√≤</th>
                <th className="px-4 py-3 border-b text-left">H√†nh ƒë·ªông</th>
              </tr>
            </thead>
            <tbody>
              {filteredAccounts.length > 0 ? (
                filteredAccounts.map((acc, idx) => (
                  <tr key={idx} className="hover:bg-gray-50">
                    <td className="px-4 py-2 border-b">{acc.name}</td>
                    <td className="px-4 py-2 border-b">{acc.email}</td>
                    <td className="px-4 py-2 border-b">{acc.phone || "‚Äî"}</td>
                    <td className="px-4 py-2 border-b">
  <span
    className={`font-semibold ${
      acc.status === "ƒêang ho·∫°t ƒë·ªông"
        ? "text-green-600"
        : "text-red-600"
    }`}
  >
    {acc.status === "ƒêang ho·∫°t ƒë·ªông"
      ? "ƒêang ho·∫°t ƒë·ªông"
      : "Kh√¥ng ho·∫°t ƒë·ªông"}
  </span>
</td>

                    <td className="px-4 py-2 border-b">
                      {acc.role || "Ch∆∞a ph√¢n quy·ªÅn"}
                    </td>
                   <td className="px-4 py-2 border-b">
  <div className="flex flex-wrap gap-2">
    {acc.status === "ƒêang ho·∫°t ƒë·ªông" ? (
      // üü¢ N·∫øu t√†i kho·∫£n ƒëang ho·∫°t ƒë·ªông -> ch·ªâ hi·ªÉn th·ªã n√∫t "Kh√≥a"
      <button
        onClick={() => lockAccount(idx)}
        className="flex items-center gap-1 px-2 py-1 text-white bg-red-500 rounded hover:bg-red-600 text-sm"
      >
        <FaLock /> Kh√≥a
      </button>
    ) : (
      // üî¥ N·∫øu t√†i kho·∫£n kh√¥ng ho·∫°t ƒë·ªông -> hi·ªÉn th·ªã ƒë·ªß 3 n√∫t
      <>
        <button
          onClick={() => openRoleModal(idx)}
          className="flex items-center gap-1 px-2 py-1 text-white bg-blue-500 rounded hover:bg-blue-600 text-sm"
        >
          <FaUserShield /> Ph√¢n quy·ªÅn
        </button>
        <button
          onClick={() => unlockAccount(idx)}
          className="flex items-center gap-1 px-2 py-1 text-white bg-green-500 rounded hover:bg-green-600 text-sm"
        >
          <FaUnlock /> M·ªü
        </button>
        <button
          onClick={() => deleteAccount(idx)}
          className="flex items-center gap-1 px-2 py-1 text-white bg-pink-500 rounded hover:bg-pink-600 text-sm"
        >
          <FaTrash /> X√≥a
        </button>
      </>
    )}
  </div>
</td>


                  </tr>
                ))
              ) : (
                <tr>
                  <td
                    colSpan="6"
                    className="text-center text-gray-500 py-4 border-b"
                  >
                    Kh√¥ng c√≥ t√†i kho·∫£n n√†o ph√π h·ª£p
                  </td>
                </tr>
              )}
            </tbody>
          </table>
        </div>

        {/* Modal Ph√¢n quy·ªÅn */}
        {showModal && selectedAccIndex !== null && (
          <div className="fixed inset-0 bg-black bg-opacity-40 flex justify-center items-center z-50">
            <div className="bg-white p-6 rounded-lg shadow w-full max-w-md">
              <h2 className="text-xl font-bold mb-4 flex items-center gap-2">
                <FaUserShield /> Ph√¢n quy·ªÅn cho{" "}
                {filteredAccounts[selectedAccIndex]?.name || "Ng∆∞·ªùi d√πng"}
              </h2>

              <label className="block mb-2 font-semibold">Vai tr√≤:</label>
              <select
                value={selectedRole}
                onChange={(e) => setSelectedRole(e.target.value)}
                className="w-full border rounded px-3 py-2 mb-4"
              >
                {roles.map((role, idx) => (
                  <option key={idx} value={role}>
                    {role}
                  </option>
                ))}
              </select>

              <label className="block mb-2 font-semibold">Quy·ªÅn:</label>
              <div className="space-y-2 mb-4">
                {permissionsList.map((perm, idx) => (
                  <label key={idx} className="flex items-center gap-2">
                    <input
                      type="checkbox"
                      checked={selectedPermissions.includes(perm)}
                      onChange={() => togglePermission(perm)}
                    />
                    {perm}
                  </label>
                ))}
              </div>

              <div className="flex justify-end gap-2">
                <button
                  onClick={saveRole}
                  className="flex items-center gap-1 px-3 py-2 text-white bg-blue-500 rounded hover:bg-blue-600 text-sm"
                >
                  <FaSave /> L∆∞u
                </button>
                <button
                  onClick={() => setShowModal(false)}
                  className="flex items-center gap-1 px-3 py-2 text-gray-600 bg-gray-200 rounded hover:bg-gray-300 text-sm"
                >
                  <FaTimes /> ƒê√≥ng
                </button>
              </div>
            </div>
          </div>
        )}
      </div>
    </div>
  );
};

export default TaiKhoan;
