// src/pages/DichVuGoi.jsx
import React, { useEffect, useState } from "react";
import Sidebar from "../components/Sidebar";
import Api from "../components/Api";

import {
  FaBoxOpen, FaFolderOpen, FaPen, FaTrash, FaPlus,
  FaHeartbeat, FaRegCalendarAlt, FaMoneyBillWave, FaTimes, FaImage,
} from "react-icons/fa";
import { Dialog } from "@headlessui/react";

const API_URL = "http://localhost:3000/api/service";

const formatVND = (n) =>
  typeof n === "number"
    ? n.toLocaleString("vi-VN") + "‚Ç´"
    : Number(n || 0).toLocaleString("vi-VN") + "‚Ç´";

const DichVuGoi = () => {
  const [goiDichVu, setGoiDichVu] = useState([]);
  const [loadingList, setLoadingList] = useState(false);
  const [listErr, setListErr] = useState("");

  const [isOpen, setIsOpen] = useState(false);
  const [isEditing, setIsEditing] = useState(false);
  const [editingId, setEditingId] = useState(null);

  const [formData, setFormData] = useState({
    title: "",
    desc: "",
    price: "",
    image: "",
    file: null, // ‚úÖ th√™m file
    thoiHan: "",
    trangThai: "ƒêang ho·∫°t ƒë·ªông",
  });

  // ==== LOAD LIST ====
  // ==== LOAD LIST ====
const fetchList = async () => {
  setLoadingList(true);
  setListErr("");
  try {
    console.log("üì° G·ªçi API qua instance Axios:", "service");
    const res = await Api.get("service");
    console.log("üì® Ph·∫£n h·ªìi t·ª´ BE:", res);
    console.table(res.data?.data || []);
    setGoiDichVu(res.data?.data || []);
  } catch (e) {
    console.error("‚ùå L·ªói khi g·ªçi API:", e);
    setListErr("Kh√¥ng t·∫£i ƒë∆∞·ª£c danh s√°ch g√≥i d·ªãch v·ª•.");
  } finally {
    setLoadingList(false);
  }
};


  useEffect(() => {
  console.log("üöÄ useEffect ch·∫°y, g·ªçi fetchList()");
  fetchList();
}, []);


  // ==== OPEN/CLOSE MODAL ====
  const openCreate = () => {
    setIsEditing(false);
    setEditingId(null);
    setFormData({
      title: "",
      desc: "",
      price: "",
      image: "",
      file: null,
      thoiHan: "",
      trangThai: "ƒêang ho·∫°t ƒë·ªông",
    });
    setIsOpen(true);
  };

  const openEdit = (goi) => {
    setIsEditing(true);
    setEditingId(goi.id);
    setFormData({
      title: goi.title ?? "",
      desc: goi.desc ?? "",
      price: goi.price ?? "",
      image: goi.image ?? "",
      file: null,
      thoiHan: goi.thoiHan ?? "",
      trangThai: goi.trangThai ?? "ƒêang ho·∫°t ƒë·ªông",
    });
    setIsOpen(true);
  };

  const handleClose = () => {
    setIsOpen(false);
    setIsEditing(false);
    setEditingId(null);
    setFormData({
      title: "",
      desc: "",
      price: "",
      image: "",
      file: null,
      thoiHan: "",
      trangThai: "ƒêang ho·∫°t ƒë·ªông",
    });
  };

  // ==== CREATE / UPDATE ====
  const handleSave = async () => {
    const price = formData.price.trim();
  if (!formData.title ) {
    alert("Vui l√≤ng t√™n d·ªãch v·ª•!");
    return;
  }
// ‚ö° Ki·ªÉm tra d·ªØ li·ªáu
  if (!formData.title.trim()) {
    alert("Vui l√≤ng nh·∫≠p t√™n g√≥i!");
    return;
  }
  // ‚ö° Ki·ªÉm tra: gi√° ph·∫£i l√† s·ªë nguy√™n d∆∞∆°ng
  if (!/^\d+$/.test(price) || Number(price) <= 0) {
    alert("Vui l√≤ng nh·∫≠p gi√°, gi√° ph·∫£i l√† s·ªë , kh√¥ng ch·ª©a k√Ω t·ª± kh√°c! v√† ph·∫£i l·ªõn h∆°n kh√¥ng");
    return;
  }


  if (!formData.desc.trim()) {
    alert("Vui l√≤ng nh·∫≠p m√¥ t·∫£!");
    return;
  }
  // N·∫øu ƒëang t·∫°o m·ªõi, b·∫Øt bu·ªôc ph·∫£i c√≥ ·∫£nh
  if (!isEditing && !formData.file) {
    alert("Vui l√≤ng ch·ªçn ·∫£nh g√≥i d·ªãch v·ª•!");
    return;
  }
  // N·∫øu ƒëang s·ª≠a, cho ph√©p gi·ªØ ·∫£nh c≈© n·∫øu c√≥, nh∆∞ng n·∫øu tr·ªëng th√¨ ph·∫£i ch·ªçn m·ªõi
  if (!formData.file && !isEditing) {
  alert("Vui l√≤ng ch·ªçn ·∫£nh h·ª£p l·ªá tr∆∞·ªõc khi l∆∞u!");
  return;
}

  // ‚ö° Ki·ªÉm tra tr∆∞·ªùng th·ªùi h·∫°n
if (!formData.thoiHan.trim()) {
  alert("Vui l√≤ng nh·∫≠p th·ªùi h·∫°n!");
  return;
}

// ‚ö° Ki·ªÉm tra: th·ªùi h·∫°n ph·∫£i l√† s·ªë nguy√™n d∆∞∆°ng
if (!/^\d+$/.test(formData.thoiHan)) {
  alert("Th·ªùi h·∫°n ph·∫£i l√† s·ªë v√† kh√¥ng ch·ª©a k√Ω t·ª± kh√°c!");
  return;
}

if (Number(formData.thoiHan) <= 0) {
  alert("Th·ªùi h·∫°n ph·∫£i l·ªõn h∆°n 0!");
  return;
}



  const fd = new FormData();
  fd.append("title", formData.title);
  fd.append("desc", formData.desc);
  fd.append("price", formData.price);
  if (formData.file) fd.append("image", formData.file);
  

  try {
    let res;
    if (isEditing) {
      res = await Api.put(`service/${editingId}`, fd, {
        headers: { "Content-Type": "multipart/form-data" },
      });
    } else {
      res = await Api.post("service", fd, {
        headers: { "Content-Type": "multipart/form-data" },
      });
    }

    console.log("üì¶ Ph·∫£n h·ªìi khi l∆∞u:", res.data);

    if (res.data.success && res.data.data) {
      // ‚úÖ C·∫≠p nh·∫≠t UI ngay l·∫≠p t·ª©c
      setGoiDichVu((prev) => {
        if (isEditing) {
          return prev.map((item) =>
            item.id === editingId ? res.data.data : item
          );
        } else {
          return [res.data.data, ...prev];
        }
      });

      // ‚úÖ G·ªçi l·∫°i API ƒë·ªÉ ƒë·∫£m b·∫£o d·ªØ li·ªáu ƒë·ªìng b·ªô & ·∫£nh m·ªõi hi·ªÉn th·ªã li·ªÅn
      await fetchList();
    }

    handleClose();
  } catch (e) {
    console.error("‚ùå L·ªói khi l∆∞u:", e);
    alert("L∆∞u th·∫•t b·∫°i! .");
  }
};




  const handleXoa = async (id) => {
    if (!window.confirm("B·∫°n ch·∫Øc ch·∫Øn mu·ªën xo√°?")) return;
    try {
      const res = await fetch(`${API_URL}/${id}`, { method: "DELETE" });
      if (!res.ok) throw new Error("DELETE failed");
      await fetchList();
    } catch (e) {
      console.error(e);
      alert("Xo√° th·∫•t b·∫°i.");
    }
  };

  return (
    <div className="flex bg-gray-50 min-h-screen">
      <Sidebar />

      <div className="flex-1 p-6 pl-72">
        <div className="flex items-center justify-between mb-6 flex-wrap gap-2">
          <h1 className="text-2xl font-bold text-blue-800 flex items-center gap-2">
            <FaBoxOpen /> Qu·∫£n l√Ω d·ªãch v·ª• g√≥i
          </h1>

          <button
            onClick={openCreate}
            className="bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded flex items-center gap-2 shadow"
          >
            <FaPlus /> T·∫°o g√≥i m·ªõi
          </button>
        </div>

        <h2 className="text-xl font-semibold text-blue-700 mb-4 flex items-center gap-2">
          <FaFolderOpen /> Danh s√°ch d·ªãch v·ª• g√≥i
        </h2>

        {loadingList && <div className="text-gray-600">ƒêang t·∫£i danh s√°ch‚Ä¶</div>}
        {!!listErr && <div className="text-red-600">{listErr}</div>}

        {!loadingList && !listErr && (
          <div className="space-y-4">
            {goiDichVu.map((goi) => (
              <div
                key={goi.id}
                className="flex flex-col md:flex-row md:items-start bg-white p-4 rounded-xl shadow-md justify-between gap-4"
              >
                <div className="flex items-start gap-4 flex-1">
                  <img
                src={`http://localhost:3000/${goi.image}`}
                alt={goi.title}
                className="w-32 h-32 object-cover rounded-lg border"
                />



                  <div>
                    <h3 className="text-lg font-bold text-blue-900 flex items-center gap-2">
                      <FaHeartbeat className="text-pink-600" /> {goi.title}
                    </h3>
                    <p className="text-gray-600 mt-1 flex items-center gap-2 flex-wrap">
                      <FaMoneyBillWave className="text-green-600" />
                      <span className="font-semibold text-black">
                        {formatVND(goi.price)}
                      </span>
                      {!!goi.thoiHan && (
                        <>
                          ‚Ä¢ <FaRegCalendarAlt /> {goi.thoiHan}
                        </>
                      )}
                      {!!goi.trangThai && (
                        <span
                          className={`ml-2 px-2 py-0.5 text-sm rounded-full ${
                            goi.trangThai === "ƒêang ho·∫°t ƒë·ªông"
                              ? "bg-green-200 text-green-800"
                              : "bg-red-200 text-red-800"
                          }`}
                        >
                          {goi.trangThai}
                        </span>
                      )}
                    </p>
                    <p className="text-gray-700 mt-1">{goi.desc}</p>
                  </div>
                </div>
                <div className="flex flex-row md:flex-col gap-2">
                  <button
                    onClick={() => openEdit(goi)}
                    className="bg-cyan-500 hover:bg-cyan-600 text-white px-4 py-2 rounded flex items-center gap-2"
                  >
                    <FaPen /> C·∫≠p nh·∫≠t
                  </button>
                  <button
                    onClick={() => handleXoa(goi.id)}
                    className="bg-pink-500 hover:bg-pink-600 text-white px-4 py-2 rounded flex items-center gap-2"
                  >
                    <FaTrash /> Xo√°
                  </button>
                </div>
              </div>
            ))}
            {goiDichVu.length === 0 && (
              <div className="text-gray-500">Ch∆∞a c√≥ g√≥i d·ªãch v·ª•.</div>
            )}
          </div>
        )}
      </div>

      {/* MODAL T·∫†O / S·ª¨A */}
      <Dialog open={isOpen} onClose={handleClose} className="relative z-50">
        <div className="fixed inset-0 bg-black/30" aria-hidden="true" />
        <div className="fixed inset-0 flex items-center justify-center p-4">
          <Dialog.Panel className="w-full max-w-lg bg-white rounded-xl p-6 shadow-lg space-y-4">
            <div className="flex justify-between items-center">
              <Dialog.Title className="text-lg font-bold text-blue-800">
                {isEditing ? "C·∫≠p nh·∫≠t g√≥i d·ªãch v·ª•" : "T·∫°o g√≥i d·ªãch v·ª•"}
              </Dialog.Title>
              <button onClick={handleClose}>
                <FaTimes className="text-gray-500 hover:text-red-500" />
              </button>
            </div>

            <input
              type="text"
              placeholder="T√™n g√≥i"
              className="w-full border px-3 py-2 rounded"
              value={formData.title}
              onChange={(e) => setFormData({ ...formData, title: e.target.value })}
            />
            <input
  type="text"
  placeholder="Gi√° (VND)"
  className="w-full border px-3 py-2 rounded"
  value={formData.price}
  onChange={(e) => setFormData({ ...formData, price: e.target.value })}
/>


            <textarea
              placeholder="M√¥ t·∫£"
              className="w-full border px-3 py-2 rounded"
              value={formData.desc}
              onChange={(e) => setFormData({ ...formData, desc: e.target.value })}
            />

            {/* ‚úÖ Ch·ªçn ·∫£nh + xem preview */}
            <div>
              <label className="text-sm font-semibold mb-1 flex items-center gap-2">
                <FaImage /> ·∫¢nh g√≥i d·ªãch v·ª•
              </label>
              {formData.image && (
  <img
    src={
      formData.image.startsWith("blob:")
        ? formData.image
        : `http://localhost:3000/${formData.image.replace(/^public[\\/]/, "")}`
    }
    alt="preview"
    className="w-32 h-32 object-cover rounded mb-2 border"
  />
)}

             <input
  type="file"
  accept="image/*"
  onChange={(e) => {
    const file = e.target.files[0];
    if (!file) return;

    // ‚úÖ Ki·ªÉm tra ƒë·ªãnh d·∫°ng h·ª£p l·ªá
    const validTypes = ["image/jpeg", "image/png", "image/jpg", "image/gif"];
    if (!validTypes.includes(file.type)) {
      alert(" Ch·ªâ ch·∫•p nh·∫≠n ·∫£nh JPG, PNG ho·∫∑c GIF!");
      e.target.value = ""; // reset input
      return;
    }

    // ‚úÖ Gi·ªõi h·∫°n k√≠ch th∆∞·ªõc (v√≠ d·ª•: 2MB)
    const maxSizeMB = 2;
    if (file.size > maxSizeMB * 1024 * 1024) {
      alert(` ·∫¢nh qu√° l·ªõn! Vui l√≤ng ch·ªçn ·∫£nh nh·ªè h∆°n ${maxSizeMB}MB.`);
      e.target.value = ""; // reset input
      return;
    }

    // ‚úÖ H·ª£p l·ªá ‚Üí t·∫°o link t·∫°m ƒë·ªÉ hi·ªÉn th·ªã preview
    const previewUrl = URL.createObjectURL(file);
    setFormData((f) => ({
      ...f,
      file,
      image: previewUrl,
    }));
  }}
/>



            </div>

       <div className="flex gap-2">
  <input
    type="text"
    placeholder="Th·ªùi h·∫°n"
    className="flex-1 border px-3 py-2 rounded"
    value={formData.thoiHan}
    onChange={(e) => {
      const val = e.target.value;
      // ‚úÖ Cho ph√©p nh·∫≠p m·ªçi th·ª© ƒë·ªÉ test, kh√¥ng ch·∫∑n t·∫°i ƒë√¢y
      setFormData({ ...formData, thoiHan: val });
    }}
  />
  <select
    className="w-28 border px-2 py-2 rounded"
    value={formData.donViThoiHan || "ng√†y"}
    onChange={(e) =>
      setFormData({ ...formData, donViThoiHan: e.target.value })
    }
  >
    <option value="ng√†y">Ng√†y</option>
    <option value="th√°ng">Th√°ng</option>
    <option value="nƒÉm">NƒÉm</option>
  </select>
</div>


            <select
              className="w-full border px-3 py-2 rounded"
              value={formData.trangThai}
              onChange={(e) => setFormData({ ...formData, trangThai: e.target.value })}
            >
              <option>ƒêang ho·∫°t ƒë·ªông</option>
              <option>Ng·ª´ng cung c·∫•p</option>
            </select>

            <div className="text-right">
              <button
                onClick={handleSave}
                className="bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded"
              >
                {isEditing ? "L∆∞u thay ƒë·ªïi" : "T·∫°o m·ªõi"}
              </button>
            </div>
          </Dialog.Panel>
        </div>
      </Dialog>
    </div>
  );
};

export default DichVuGoi;
